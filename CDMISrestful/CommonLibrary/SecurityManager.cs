using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using CDMISrestful.DataMethod;
using CDMISrestful.DataModels;
using System.Text.RegularExpressions;

namespace CDMISrestful.CommonLibrary
{
    /// <summary>
    /// Token-based authentication for ASP .NET MVC REST web services.
    /// Copyright (c) 2015 Kory Becker
    /// http://primaryobjects.com/kory-becker
    /// License MIT
    /// </summary>
    public static class SecurityManager
    {
        private const string _alg = "HmacSHA256";//token加密所采用的算法
        private const string _salt = "rz8LuOtFBXphj9WQfvFh";//盐加密，相当于放在服务端的一个很安全的key
        private static int _expirationMinutes = 1000;

        /// <summary>
        /// Generates a token to be used in API calls.
        /// The token is generated by hashing a message with a key, using HMAC SHA256.
        /// The message is: username:ip:userAgent:timeStamp
        /// The key is: password:ip:salt
        /// The resulting token is then concatenated with username:timeStamp and the result base64 encoded.
        /// 
        /// API calls may then be validated by:
        /// 1. Base64 decode the string, obtaining the token, username, and timeStamp.
        /// 2. Ensure the timestamp is not expired.
        /// 2. Lookup the user's password from the db (cached).
        /// 3. Hash the username:ip:userAgent:timeStamp with the key of password:salt to compute a token.
        /// 4. Compare the computed token with the one supplied and ensure they match.
        /// </summary>
        /// 下面函数用来产生token，输入可以放你关心的，我们可以放username,role和password来计算token，这里的demo用的输入比较多，但是实现起来都一样
        /// 有一个不足：没有验证客户端传过来的参数是不是合法，即传过来一个用户名，我要检查它是不是已经在我服务端数据库注册过了
        public static string GenerateToken(string userId, string password, string role, string ticks)
        {
            //DateTime ticks = DateTime.UtcNow;
            string hash = string.Join(":", new string[] { userId, role, ticks });
            //先把几个公共部分耦合一下
            string hashLeft = "";
            string hashRight = "";

            using (HMAC hmac = HMACSHA256.Create(_alg))//使用Hash256这个算法创建一个哈希信息验证码hmac
            {
                hmac.Key = Encoding.UTF8.GetBytes(GetHashedPassword(password));//调用GetHashedPassword函数获取hmac.Key，用到了password和_salt
                hmac.ComputeHash(Encoding.UTF8.GetBytes(hash));

                hashLeft = Convert.ToBase64String(hmac.Hash);//token的私密部分，decode后才能验证是不是合法的token，包括password和salt这些敏感信息
                hashRight = string.Join(":", new string[] { userId, role, ticks.ToString() });//token的公共部分，用于识别用户名是否合法以及token是否过期
            }

            return Convert.ToBase64String(Encoding.UTF8.GetBytes(string.Join(":", hashLeft, hashRight)));
        }

        /// <summary>
        /// Returns a hashed password + salt, to be used in generating a token.
        /// </summary>
        /// <param name="password">string - user's password</param>
        /// <returns>string - hashed password</returns>
        public static string GetHashedPassword(string password)
        {
            string key = string.Join(":", new string[] { password, _salt });
            //用password和_salt产生key，其中_salt是绝对安全的，因为不进行任何传输
            using (HMAC hmac = HMACSHA256.Create(_alg))//新建一个hmac由_alg产生
            {
                // Hash the key.
                hmac.Key = Encoding.UTF8.GetBytes(_salt);
                hmac.ComputeHash(Encoding.UTF8.GetBytes(key));

                return Convert.ToBase64String(hmac.Hash);
            }
        }

        /// <summary>
        /// Checks if a token is valid.
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        public static bool IsTokenValid(string token)
        {
            bool result = false;

            try
            {
                // Base64 decode the string, obtaining the token:username:timeStamp.
                string key = Encoding.UTF8.GetString(Convert.FromBase64String(token));

                // Split the parts.
                string[] parts = key.Split(new char[] { ':' });
                if (parts.Length == 6)
                {
                    // Get the hash message, username, and timestamp.
                    string hash = parts[0];
                    string UserId = parts[1];
                    string role = parts[2];
                    string tokentime = parts[3] + ":" + parts[4] + ":" + parts[5];
                    //long ticks = long.Parse(tokentime);
                    //DateTime timeStamp = new DateTime(ticks);

                    DateTime timeStamp = Convert.ToDateTime(tokentime);

                    // Ensure the timestamp is valid.
                    bool expired = Math.Abs((DateTime.UtcNow - timeStamp).TotalMinutes) > _expirationMinutes;
                    if (!expired)
                    {
                        DataConnection pclsCache = new DataConnection();
                        Regex dReg = new Regex(@"^1[3578][01379]\d{8}$");        
                        Regex tReg = new Regex(@"^1[34578][01256]\d{8}$");        
                        Regex yReg = new Regex(@"^(134[012345678]\d{7}|1[34578][012356789]\d{8})$");
                        Regex mail = new Regex("^\\s*([A-Za-z0-9_-]+(\\.\\w+)*@(\\w+\\.)+\\w{2,5})\\s*$");
                        string pwType = "";
                        if( dReg.IsMatch(UserId) || tReg.IsMatch(UserId) || yReg.IsMatch(UserId))
                        {
                            pwType = "PhoneNo";
                        }
                        else if(mail.IsMatch(UserId))
                        {
                            pwType = "Email";
                        }
                            string UserIdCheck = new UsersMethod().GetIDByInputPhone(pclsCache, pwType, UserId);//用手机号获取UserId  
                             bool exist = new UsersMethod().CheckUserExist(pclsCache, UserIdCheck);
                             if (exist)
                            {
                                   //string password = "password";
                                   UserInfoByUserId list = new UserInfoByUserId();
                                   list = new UsersMethod().GetUserInfoByUserId(pclsCache, UserIdCheck);
                                   string password = "";
                                   if (list != null)
                                   {
                                       password = list.Password;
                                   }
                                    // Hash the message with the key to generate a token.
                                   string computedToken = GenerateToken(UserId, password, role, tokentime);

                                   // Compare the computed token with the one supplied and ensure they match.
                                   result = (token == computedToken);
                             }
                        }
                       
                    }
                
            }
            catch
            {
            }

            return result;
        }

    }
}
